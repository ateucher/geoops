// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// bearing
double bearing(std::string start, std::string end);
RcppExport SEXP geoops_bearing(SEXP startSEXP, SEXP endSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type start(startSEXP);
    Rcpp::traits::input_parameter< std::string >::type end(endSEXP);
    rcpp_result_gen = Rcpp::wrap(bearing(start, end));
    return rcpp_result_gen;
END_RCPP
}
// distance
double distance(std::string start, std::string end, std::string units);
RcppExport SEXP geoops_distance(SEXP startSEXP, SEXP endSEXP, SEXP unitsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type start(startSEXP);
    Rcpp::traits::input_parameter< std::string >::type end(endSEXP);
    Rcpp::traits::input_parameter< std::string >::type units(unitsSEXP);
    rcpp_result_gen = Rcpp::wrap(distance(start, end, units));
    return rcpp_result_gen;
END_RCPP
}
// nearest
std::string nearest(std::string target_point, std::string points);
RcppExport SEXP geoops_nearest(SEXP target_pointSEXP, SEXP pointsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type target_point(target_pointSEXP);
    Rcpp::traits::input_parameter< std::string >::type points(pointsSEXP);
    rcpp_result_gen = Rcpp::wrap(nearest(target_point, points));
    return rcpp_result_gen;
END_RCPP
}
// get_coords
std::string get_coords(std::string x);
RcppExport SEXP geoops_get_coords(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(get_coords(x));
    return rcpp_result_gen;
END_RCPP
}
// in_ring
bool in_ring(String pt, String ring);
RcppExport SEXP geoops_in_ring(SEXP ptSEXP, SEXP ringSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< String >::type pt(ptSEXP);
    Rcpp::traits::input_parameter< String >::type ring(ringSEXP);
    rcpp_result_gen = Rcpp::wrap(in_ring(pt, ring));
    return rcpp_result_gen;
END_RCPP
}
// inside_cpp
bool inside_cpp(String point, String polygon);
RcppExport SEXP geoops_inside_cpp(SEXP pointSEXP, SEXP polygonSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< String >::type point(pointSEXP);
    Rcpp::traits::input_parameter< String >::type polygon(polygonSEXP);
    rcpp_result_gen = Rcpp::wrap(inside_cpp(point, polygon));
    return rcpp_result_gen;
END_RCPP
}
// fart_cpp
bool fart_cpp(String point, String polygon);
RcppExport SEXP geoops_fart_cpp(SEXP pointSEXP, SEXP polygonSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< String >::type point(pointSEXP);
    Rcpp::traits::input_parameter< String >::type polygon(polygonSEXP);
    rcpp_result_gen = Rcpp::wrap(fart_cpp(point, polygon));
    return rcpp_result_gen;
END_RCPP
}
// lineDistance
double lineDistance(std::string line, std::string units);
RcppExport SEXP geoops_lineDistance(SEXP lineSEXP, SEXP unitsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type line(lineSEXP);
    Rcpp::traits::input_parameter< std::string >::type units(unitsSEXP);
    rcpp_result_gen = Rcpp::wrap(lineDistance(line, units));
    return rcpp_result_gen;
END_RCPP
}
// version
std::string version();
RcppExport SEXP geoops_version() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(version());
    return rcpp_result_gen;
END_RCPP
}
